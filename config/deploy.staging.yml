
# Name of your application. Used to uniquely configure containers.
service: mortimer-anemone

# Name of the container image.
image: wdiechmann/mortimer-anemone

# Deploy to these servers.
servers:
  web:
    - 135.181.202.106





# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption. 
proxy: 
  ssl: true
  host: anemone.mortimer.pro
  # Proxy connects to your container on port 80 by default.
  # app_port: 3000

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: wdiechmann

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  remote: ssh://root@135.181.202.106
  arch: arm64

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  secret:
    - SECRET_KEY_BASE
    - RAILS_MASTER_KEY
    - DINERO_APP_ID
    - DINERO_APP_SECRET
    - SMTP_PASSWORD
    - VAPID_PRIVATE_KEY
    - VAPID_PUBLIC_KEY
    - WAVIX_APP_ID
    - OTP_KEY
    - ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY
    - ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY
    - ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT    
    - MS_AD_ID
    - MS_AD_SECRET
    - SMTP_USER_NAME
    - SMTP_PORT
    - SMTP_AUTHENTICATION
    - SMTP_HOST
  clear:
    SOLID_QUEUE_IN_PUMA: true
    WEB_HOST: anemone.mortimer.pro
    PORT: 3000
    RAILS_ENV: production
    PDF_HOST: 135.181.202.106 
    SMTP_DOMAIN: mortimer.pro
    SMTP_ENABLE_STARTTLS_AUTO: 'false'
    SSL_DOMAIN: anemone.mortimer.pro
    MORTIMER_VERSION: "1.0.9"
    DINERO_APP_CALLBACK: 'https://anemone.mortimer.pro/dinero/callback'

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive  --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"

# Use a different ssh user than root
# ssh:
#   user: root

# Use a persistent storage volume.
#
volumes:
  - "storage:/rails/storage"

# Configure builder setup.
# builder:
#   args:
#     RUBY_VERSION: 3.2.0
#   secrets:
#     - GITHUB_TOKEN
#   remote:
#     arch: amd64
#     host: ssh://app@192.168.0.1

accessories:
  pdf:
    image: 4teamwork/weasyprint
    host: 135.181.202.106
    port: 8080
# Use accessory services (secrets come from .env).
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     port: 3306
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data


# Configure a custom healthcheck (default is /up on port 3000)
# healthcheck:
#   path: /healthz
#   port: 4000

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
# asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Configure the role used to determine the primary_host. This host takes
# deploy locks, runs health checks during the deploy, and follow logs, etc.
#
# Caution: there's no support for role renaming yet, so be careful to cleanup
#          the previous role on the deployed hosts.
# primary_role: web

# Controls if we abort when see a role with no hosts. Disabling this may be
# useful for more complex deploy configurations.
#
# allow_empty_roles: false
