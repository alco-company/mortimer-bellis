# Name of your application. Used to uniquely configure containers.
service: mortimer-bellis

# Name of the container image.
image: wdiechmann/mortimer-bellis

builder:
  remote:
    arch: arm64
    host: ssh://root@65.108.89.110

# Deploy to these servers.
servers:
  web:
    hosts:
      - 65.108.89.110
    options:
      # "add-host": host.docker.internal:host-gateway
      # network: "mortimer"    
    labels:
      traefik.enable: true
      traefik.http.routers.mortimer.entrypoints: websecure
      traefik.http.routers.mortimer.rule: Host(`bellis.mortimer.pro`)
      traefik.http.routers.mortimer.tls.certresolver: letsencrypt
      traefik.http.routers.mortimer.tls.domains[0].main: bellis.mortimer.pro
      traefik.http.routers.mortimer.tls.domains[0].sans: bellis.mortimer.pro

traefik:
  options:
    publish:
      - "443:443"
    volume:
      - "/root/letsencrypt/acme.json:/letsencrypt/acme.json"
    # network: "mortimer"
  args:
    api.dashboard: true
    log.level: INFO
    accesslog.format: json
    accesslog.filters.statusCodes: "400-599"
    accesslog.filters.retryAttempts: true
    accesslog.filters.minDuration: 101ms

    entryPoints.web.address: ":80"
    entryPoints.websecure.address: ":443"

    entryPoints.web.http.redirections.entryPoint.to: websecure
    entryPoints.web.http.redirections.entryPoint.scheme: https
    entryPoints.web.http.redirections.entrypoint.permanent: true

    certificatesResolvers.letsencrypt.acme.email: "walther@alco.dk"
    certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json"
    certificatesResolvers.letsencrypt.acme.httpchallenge: true
    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web
    # certificatesResolvers.letsencrypt.acme.tlschallenge: true
    # certificatesResolvers.letsencrypt.acme.caserver: https://acme-staging-v02.api.letsencrypt.org/directory

  labels:
    traefik.enable: true
    traefik.http.routers.dashboard.rule: Host(`traefik.mortimer.pro`)
    traefik.http.routers.dashboard.service: api@internal
    traefik.http.routers.dashboard.middlewares: redirect-to-https, auth
    traefik.http.routers.dashboard.tls: true
    traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: https
    traefik.http.middlewares.auth.basicauth.users: test:what_a_password


volumes:
  - "storage:/rails/storage"

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: wdiechmann

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  clear:
    DB_HOST: 65.108.89.110
    SMTP_USER_NAME: 'info@mortimer.pro'
    SMTP_DOMAIN: 'mortimer.pro'
    SMTP_HOST: 'hosting.alco.company'
    SMTP_PORT: '587'
    SMTP_AUTHENTICATION: 'plain'
    SMTP_ENABLE_STARTTLS_AUTO: 'false'
    SSL_DOMAIN: 'bellis.mortimer.pro'
    WEB_HOST: 'bellis.mortimer.pro'
    MORTIMER_VERSION: '0.0.2'
  secret:
    - RAILS_MASTER_KEY
    - SMTP_PASSWORD
    - WAVIX_APP_ID

# Use a different ssh user than root
ssh:
  user: root

# Configure builder setup.
# builder:
#   args:
#     RUBY_VERSION: 3.2.0
#   secrets:
#     - GITHUB_TOKEN
#   remote:
#     arch: amd64
#     host: ssh://app@192.168.0.1

# Use accessory services (secrets come from .env).
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     port: 3306
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data

# Configure custom arguments for Traefik
# traefik:
#   args:
#     accesslog: true
#     accesslog.format: json

# Configure a custom healthcheck (default is /up on port 3000)
# healthcheck:
#   path: /healthz
#   port: 4000

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
# asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Configure the role used to determine the primary_host. This host takes
# deploy locks, runs health checks during the deploy, and follow logs, etc.
#
# Caution: there's no support for role renaming yet, so be careful to cleanup
#          the previous role on the deployed hosts.
# primary_role: web

# Controls if we abort when see a role with no hosts. Disabling this may be
# useful for more complex deploy configurations.
#
# allow_empty_roles: false
